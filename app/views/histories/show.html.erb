history show
<%= content_tag(:p, link_to("Back", history_path, { class: "btn btn-primary"})) %>

<%= javascript_include_tag "log/result" %>
<%= javascript_include_tag "log/show" %>

<script>
var test = <%= @send_data.to_json.html_safe %>
var	show = <%= @receive_data.to_json.html_safe %>

Result.vertical(test);
Result.vertical(show);
</script>

<style>

.link {
	fill: none;
	stroke: #666;
	stroke-width: 1.5px;
}

.node circle {
	fill: #ccc;
	stroke: #fff;
	stroke-width: 1.5px;
}

text {
	font: 10px sans-serif;
	pointer-events: none;
}

</style>

<script type="text/javascript">

var w = 1200;
var h = 600;
var linkDistance=200;
var node_list = <%= @node_list.to_json.html_safe %>
var edge_list = <%= @each_send_data.to_json.html_safe %>


var colors = d3.scale.category10();

var dataset = {
	nodes: node_list,
	edges: edge_list
};


var svg = d3.select("body").append("svg").attr({"width":w,"height":h});

var force = d3.layout.force()
.nodes(dataset.nodes)
.links(dataset.edges)
.size([w,h])
.linkDistance([linkDistance])
.charge([-500])
.theta(0.1)
.gravity(0.05)
.start();

var edges = svg.selectAll("line")
.data(dataset.edges)
.enter()
.append("line")
.attr("id",function(d,i) {return 'edge'+i})
.attr('marker-end','url(#arrowhead)')
.style("stroke","#000")
.style("pointer-events", "none");

var nodes = svg.selectAll("circle")
.data(dataset.nodes)
.enter()
.append("circle")
.attr({"r":15})
.style("fill",function(d,i){return colors((i<2));})
.call(force.drag)


var nodelabels = svg.selectAll(".nodelabel") 
.data(dataset.nodes)
.enter()
.append("text")
.attr({"x":function(d){return d.x;},
	"y":function(d){return d.y;},
	"class":"nodelabel",
	"stroke":"black"})
.text(function(d){return d.name;});

var edgepaths = svg.selectAll(".edgepath")
.data(dataset.edges)
.enter()
.append('path')
.attr({'d': function(d) {return 'M '+d.source.x+' '+d.source.y+' L '+ d.target.x +' '+d.target.y},
	'class':'edgepath',
	'fill-opacity':0,
	'stroke-opacity':0,
	'fill':'blue',
	'stroke':'red',
	'id':function(d,i) {return 'edgepath'+i}})
.style("pointer-events", "none");

var edgelabels = svg.selectAll(".edgelabel")
.data(dataset.edges)
.enter()
.append('text')
.style("pointer-events", "none")
.attr({'class':'edgelabel',
	'id':function(d,i){return 'edgelabel'+i},
	'dx':90,
	'dy':15,
	'font-size':18,
	'fill':'#000'});

edgelabels.append('textPath')
.attr('xlink:href',function(d,i) {return '#edgepath'+i})
.style("pointer-events", "none")
.text(function(d,i){return d.value});


svg.append('defs').append('marker')
.attr({'id':'arrowhead',
	'viewBox':'-0 -5 10 10',
	'refX':25,
	'refY':0,
               
               'orient':'auto',
               'markerWidth':10,
               'markerHeight':10,
               'xoverflow':'visible'})
.append('svg:path')
.attr('d', 'M 0,-5 L 10 ,0 L 0,5')
.attr('fill', '#000')
.attr('stroke','#000');


force.on("tick", function(){

	edges.attr({"x1": function(d){return d.source.x;},
		"y1": function(d){return d.source.y;},
		"x2": function(d){return d.target.x;},
		"y2": function(d){return d.target.y;}
	});

	nodes.attr({"cx":function(d){return d.x;},
		"cy":function(d){return d.y;}
	});

	nodelabels.attr("x", function(d) { return d.x; }) 
	.attr("y", function(d) { return d.y; });

	edgepaths.attr('d', function(d) { var path='M '+d.source.x+' '+d.source.y+' L '+ d.target.x +' '+d.target.y;
                                           //console.log(d)
                                           return path});       

	edgelabels.attr('transform',function(d,i){
		if (d.target.x<d.source.x){
			bbox = this.getBBox();
			rx = bbox.x+bbox.width/2;
			ry = bbox.y+bbox.height/2;
			return 'rotate(180 '+rx+' '+ry+')';
		}
		else {
			return 'rotate(0)';
		}
	});
});

</script>